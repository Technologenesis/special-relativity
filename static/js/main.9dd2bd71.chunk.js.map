{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","props","state","perspective","paused","observers","name","relative_velocity","proper_time","acceleration","set_relative_velocity","bind","lorentzian_transform","togglePaused","setInterval","setState","map","observer","new_vel","new_accel","acceleration_sign","rate","animation_step","final","gamma","this","idx","velocity","parseFloat","parsed_idx","parseInt","final_velocities","vel","perspective_shift_animation_length","interval","max","data","current_proper_time","frame_interval","frame_offset","push","x","y","tick_time_in_current_frame","Math","sqrt","x_prime","t","t_prime","time","onChange","event","set_perspective","target","value","type","min","step","width","height","yDomain","xDomain","title","position","get_spacetime_intervals","className","onClick","React","defaultProps","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9dd2bd71.chunk.js","sourcesContent":["import './App.css';\nimport * as React from \"react\";\nimport {XYPlot, VerticalGridLines, HorizontalGridLines, XAxis, YAxis, LineMarkSeries, LineSeries} from 'react-vis';\nimport '../node_modules/react-vis/dist/style.css';\n\nclass App extends React.Component {\n    static defaultProps = {\n        animation_step: .02,\n        perspective_shift_animation_length: .2\n    }\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            perspective: 0,\n            paused: false,\n            observers: [\n                {\n                    name: \"Observer A\",\n                    relative_velocity: 0,\n                    proper_time: 0,\n                    acceleration: null\n                },\n                {\n                    name: \"Observer B\",\n                    relative_velocity: 0.5,\n                    proper_time: 0,\n                    acceleration: null\n                },\n                {\n                    name: \"Observer C\",\n                    relative_velocity: -0.5,\n                    proper_time: 0,\n                    acceleration: null\n                }\n        ]};\n        this.set_relative_velocity = this.set_relative_velocity.bind(this);\n        this.lorentzian_transform = this.lorentzian_transform.bind(this);\n        this.togglePaused = this.togglePaused.bind(this);\n    }\n\n    componentDidMount() {\n        setInterval(() => {\n            this.setState({\n                observers: this.state.observers.map((observer) => {\n                    let new_vel = observer.relative_velocity;\n                    let new_accel = observer.acceleration;\n                    if(new_accel != null) {\n                        const acceleration_sign = new_accel.rate < 0;\n                        new_vel = observer.acceleration ? observer.relative_velocity +observer.acceleration.rate*this.props.animation_step :\n                            observer.relative_velocity;\n                        const diff_sign = new_accel.final - new_vel < 0;\n                        if(acceleration_sign !== diff_sign) {\n                            new_vel = observer.acceleration.final;\n                            new_accel = null;\n                        }\n                    }\n\n                    return {\n                        proper_time: this.state.paused ? observer.proper_time : observer.proper_time + this.props.animation_step/this.gamma(observer.relative_velocity),\n                        relative_velocity: new_vel,\n                        acceleration: new_accel,\n                        name: observer.name\n                    }\n                })\n            })\n        }, this.props.animation_step*1000);\n    }\n\n    set_relative_velocity(idx, velocity) {\n        let observers = this.state.observers;\n        observers[idx].relative_velocity = parseFloat(velocity);\n        this.setState({observers: observers});\n    }\n\n    set_perspective(idx) {\n        const parsed_idx = parseInt(idx);\n        const velocity = this.state.observers[parsed_idx].relative_velocity;\n        const final_velocities = this.state.observers.map(observer => {\n            return (observer.relative_velocity - velocity) / (1 - observer.relative_velocity*velocity);\n        });\n        this.setState({\n            observers:final_velocities.map((vel, idx) => {\n                const observer = this.state.observers[idx];\n                const acceleration = {\n                    rate: (vel-observer.relative_velocity)/this.props.perspective_shift_animation_length,\n                    final: vel\n                };\n                return {\n                    name: observer.name,\n                    relative_velocity: observer.relative_velocity,\n                    proper_time: observer.proper_time,\n                    acceleration: acceleration\n                }\n            }),\n            perspective: parsed_idx\n        });\n    }\n\n    get_spacetime_intervals(observer, interval=1, max=10) {\n        let data = [];\n        const current_proper_time = this.state.observers[this.state.perspective].proper_time;\n        const frame_interval = this.gamma(observer.relative_velocity); // denotes the time interval in the current reference frame between ticks\n        const frame_offset = current_proper_time+(interval-(observer.proper_time%interval))*this.gamma(observer.relative_velocity);\n        data.push({x: 0, y: current_proper_time});\n        let idx=0;\n        let tick_time_in_current_frame = frame_offset + idx*frame_interval;\n        while(tick_time_in_current_frame <= current_proper_time + max) { // until we hit the top of the graph,\n            data.push({x: observer.relative_velocity*(tick_time_in_current_frame-current_proper_time), y: tick_time_in_current_frame}); // push the next tick onto the worldline\n            idx += 1;\n            tick_time_in_current_frame = frame_offset + idx*frame_interval;\n        }\n        data.push({x: observer.relative_velocity*(tick_time_in_current_frame - current_proper_time), y: tick_time_in_current_frame}); // one more push to make sure the line fills the whole graph\n        return data;\n    }\n\n    lorentzian_transform(velocity) {\n        const gamma = 1/Math.sqrt(1-velocity**2);\n        return {x_prime: (x, t) => gamma*(x-velocity*t), t_prime: (x, t) => gamma*(t-velocity*x)};\n    }\n\n    gamma(velocity) {\n        return 1/Math.sqrt(1-velocity**2);\n    }\n\n    togglePaused() {\n        this.setState({paused: !this.state.paused});\n    }\n\n    render() {\n        const time = this.state.observers[this.state.perspective].proper_time;\n        return (\n            <div>\n                <form>\n                    <label>Reference Frame: <select name=\"perspective\" onChange={event => this.set_perspective(event.target.value)}>\n                        {\n                            this.state.observers.map((observer, idx) => (\n                                <option key={idx} value={idx}>{observer.name}</option>\n                            ))\n                        }\n                    </select></label><br/>\n                    {this.state.observers.map((observer, idx) => this.state.perspective !== idx ? (\n                        <label key={idx}>V<sub>{observer.name}</sub>: <input type=\"range\" min=\"-.95\" max=\".95\" step=\".01\" value={this.state.observers[idx].relative_velocity} onChange={event => this.set_relative_velocity(idx, event.target.value)}/><br/></label>\n                    ) : null)}\n                </form>\n                <XYPlot width={500} height={500} yDomain={[time, time+10]} xDomain={[-10,10]}>\n                    <VerticalGridLines />\n                    <HorizontalGridLines />\n                    <XAxis title={\"Space (light-seconds)\"}/>\n                    <YAxis title={\"Time (seconds)\"} position=\"middle\"/>\n                    {\n                        this.state.observers.map((observer, idx) => (\n                            <LineMarkSeries key={idx} data={this.get_spacetime_intervals(observer)} className={observer.name}/>\n                        ))\n                    }\n                    <LineSeries data={[{x: 0, y: time}, {x:  10, y: time+10}]}/>\n                    <LineSeries data={[{x: 0, y: time}, {x: -10, y: time+10}]}/>\n                </XYPlot>\n\n                <button onClick={this.togglePaused}>Pause</button>\n\n                <h2>How It Works</h2>\n                <p>\n                    What you are looking at is a moving \"Spacetime Diagram\".  It shows the velocity of objects through\n                    spacetime.\n                </p>\n                <p>\n                    Use the \"Reference Frame\" selector to choose what speed will be considered the \"zero\" speed.\n                    The principle of relativity dictates that your choice of reference speed should *not* affect the\n                    nature of physical laws; this diagram demonstrates that.  Notice that regardless of reference frame,\n                    the speed of light remains constant.\n                </p>\n                <p>\n                    You can also adjust the relative speeds of various observers to demonstrate various relativistic\n                    effects.  Each line shows the path an object would take through space-time at the given velocity.\n                    The dots on each line split them into regular intervals.  They may not look regular to you - close\n                    to the speed of light, the dots appear to spread out significantly.  This is due to the odd geometry\n                    of spacetime - in reality, the dots are all separated by the same \"spacetime interval\", which each\n                    observer will experience as a single second along their time axis.  The dots therefore demonstrate\n                    the effects of time dilation.\n                </p>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}